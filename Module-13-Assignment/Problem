Write a program that converts an infix expression into an
equivalent postfix expression.
The rules to convert an infix expression into an equivalent
postfix expression are as follows:
Suppose infx represents the infix expression and pfx represents
the postfix expression. The rules to convert infx into pfx are as
follows:
a. Initialize pfx to an empty expression and also
initialize the stack.
b. Get the next symbol, sym, from infx.
b.1. If sym is an operand, append sym to pfx.
b.2. If sym is (, push sym into the stack.
b.3. If sym is ), pop and append all the symbols from
the stack until the most recent left parenthesis. Pop
and discard the left parenthesis.
b.4. If sym is an operator:
b.4.1. Pop and append all the operators from the
stack to pfx that are above the most recent left
parenthesis and have precedence greater than or
equal to sym.
b.4.2. Push sym onto the stack.
c. After processing infx, some operators might be left in
the stack. Pop and append to pfx everything from the stack.
In this program, you will consider the following (binary)
arithmetic opera- tors: +, -, *, and /. You may assume that the
expressions you will process are error free.
Design a class that stores the infix and postfix strings. The
class must include the following operations:
• getInfix—Stores the infix expression
• showInfix—Outputs the infix expression
• showPostfix—Outputs the postfix expression
2
Some other operations that you might need are the following:
• convertToPostfix—Converts the infix expression into a postfix
expression. The resulting postfix expression is stored in pfx.
• precedence—Determines the precedence between two operators. If
the first operator is of higher or equal precedence than the
second operator, it returns the value true; otherwise, it returns
the value false.
Include the constructors and destructors for automatic
initialization and dynamic memory deallocation.
Test your program on the following five expressions:
A + B - C;
(A + B) * C;
(A + B) * (C - D);
A + ((B + C) * (E - F) - G) / (H - I); A + B * (C + D) - E / F *
G + H;
For each expression, your answer must be in the following form:
Infix Expression: A + B - C;
Postfix Expression: A B + C -
Direct the output to the external file YourIslandIDLab5.out.
(Hint: May use Linux Commands!)
Postliminary task:
Format your output so that the user of your program understands
the values that were input and what was output for each
calculation. Your program should have a user-friendly interface.
Make sure your program is properly documented and good
programming standards are followed. You are required to follow
C++ Style guide, which is available on Blackboard.
Try your program with a variety of input values, to determine it
works properly.

